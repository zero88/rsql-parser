name: Java CI

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.yml'
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    branches: [ master ]
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.yml'

env:
  JAVA_DIST: zulu

jobs:
  context:
    runs-on: ubuntu-latest
    outputs:
      shouldBuild: ${{ steps.context.outputs.decision_build }}
      shouldPublish: ${{ steps.context.outputs.decision_publish }}
      isRelease: ${{ steps.context.outputs.isTag }}
      commitId: ${{ steps.context.outputs.shortCommitId }}
      version: ${{ steps.ver_ctx.outputs.version }}

    steps:
      - uses: actions/checkout@v2.4.0
        with:
          token: ${{ secrets.OSS_GITHUB_TOKEN }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          git-user-signingkey: true
          git-commit-gpgsign: true
          git-tag-gpgsign: true
          git-push-gpgsign: false
          gpg-private-key: ${{ secrets.CI_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.CI_GPG_PASSPHARSE }}

      - name: Project context
        id: context
        uses: zero88/gh-project-context@v1.1
        with:
          mustSign: true
          nextVerMode: PATCH

      - name: Normalize version
        id: ver_ctx
        shell: bash
        run: |
          [[ "${{ steps.context.outputs.isTag }}" == "true" ]] && sv="" || sv=$(grep semanticVersion project.properties | cut -d'=' -f2)
          echo ::set-output name=version::${{ steps.context.outputs.version }}$sv

  build:
    runs-on: ${{ matrix.os }}
    needs: [ context ]
    if: needs.context.outputs.shouldBuild == 'true'
    strategy:
      matrix:
        java: [ '8', '11' ]
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
    name: Java ${{ matrix.Java }} (${{ matrix.os }}) build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: ${{ matrix.java }}
          cache: 'maven'
      - name: Build
        run: mvn -B package

  analysis:
    runs-on: ubuntu-latest
    needs: [ context ]
    if: needs.context.outputs.shouldBuild == 'true'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: '11'
          cache: 'maven'

      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Sonar scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dversion=${{ needs.context.outputs.version }}

  publish:
    runs-on: ubuntu-latest
    needs: [ context, build ]
    if: needs.context.outputs.shouldPublish == 'true' && needs.context.outputs.isRelease != 'true'
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: '11'
          cache: 'maven'

      - name: Publish to GitHub Packages Apache Maven
        run: mvn --batch-mode deploy -Pgithub -Dversion=${{ needs.context.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: '11'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          cache: 'maven'

      - name: Publish to OSSRH snapshot
        run: mvn --batch-mode deploy -Possrh -Dversion=${{ needs.context.outputs.version }}
        env:
          MAVEN_USERNAME: ${{ secrets.OSS_SONATYPE_USER }}
          MAVEN_PASSWORD: ${{ secrets.OSS_SONATYPE_PASSWORD }}

  release:
    runs-on: ubuntu-latest
    needs: [ context, build, analysis ]
    if: needs.context.outputs.isRelease == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          git-user-signingkey: true
          gpg-private-key: ${{ secrets.CI_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.CI_GPG_PASSPHARSE }}

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: '11'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Publish to GitHub Packages Apache Maven
        run: |
          mvn --batch-mode deploy -Possrh \
            -Dgpg.keyname=${{ steps.import_gpg.outputs.keyid }} -Dgpg.passphrase=${{ secrets.CI_GPG_PASSPHARSE }} -Dgpg.skip=false \
            -Dversion=${{ needs.context.outputs.version }}
        env:
          MAVEN_USERNAME: ${{ secrets.OSS_SONATYPE_USER }}
          MAVEN_PASSWORD: ${{ secrets.OSS_SONATYPE_PASSWORD }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: false
          prerelease: false
